#########################################################################################
# Demo6 Gitlab pipeline
# Name: CICD pipeline 
# Aurthor: Rushikesh Bhoir
# Version: V1
# Date: 11 July 2023
#########################################################################################
# Defined Variables
variables:
  terraform_image: artifactorycn.netcracker.com:17048/utils/terraform-openstack:1.4.6
  ansible_image: artifactorycn.netcracker.com:17048/utils/ansible:6.6.0

#########################################################################################

stages:
  - "lint"      # ansible-lint verifying the code.
  # - "deploy"    # terraform building an instance.
  # - "configure" # Instance is getting configured using ansible.
  # - "test"      # Test the curl output.
  # - "destroy"   # Destroying the instance.

#########################################################################################
# Defining runner to run the pipeline.
default:
  tags: [ NETCRACKER ]

#########################################################################################

# workflow:
#   rules:
#     - if: '$CI_PIPELINE_SOURCE == "push"'
#       when: never  # Prevent pipeline run for push event
#     - when: always # Run pipeline for all other cases

# workflow:
#   rules:
#     - if: '$CI_PIPELINE_SOURCE == "web"' # Only run if you click the "Run Pipeline" button in the web UI
#       when: always
#     - when: never # Prevent pipeline for all other cases

# workflow:
#     rules:
#       - if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
#         when: always
        
# workflow:
#   rules:
#     - if: '$CI_COMMIT_REF_NAME == "master" && $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_COMMIT_REF_NAME == $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "testing"'

#########################################################################################
# STAGE1: ansible-lint verifying the code.
lint:
    stage: lint
    # tags:
    #   - NETCRACKER
    image: $ansible_image

    script:
      - ansible-lint -p --offline --exclude meta/ --exclude defaults/ ansible/site.yaml > linter.txt

    artifacts:
      paths:
      - linter.txt
      when: on_failure

# #########################################################################################
# #STAGE2: # terraform building an instance.
# deploy:
#     stage: deploy
#     # tags:
#     #   - NETCRACKER
#     image: $terraform_image
#     script:
#       - echo "$openrc" > openstack.sh
#       # - cat openstack.sh
#       # - echo "export OS_PASSWORD=$OS_PASSWORD_INPUT" >> openstack.sh   
#       # - apt-get install ssh -y
#       # - ssh-keygen -t rsa -b 2048 -f "/root/.ssh/id_rsa" -N ""
#       - mkdir -p $HOME/.ssh/
#       - echo "$PUBLIC_KEY" > $HOME/.ssh/id_rsa.pub
#       - source openstack.sh
#       # - echo $OS_CACERT
#       # - echo $OS_PROJECT_ID
#       # - echo $OS_AUTH_URL
#       # - echo $OS_USERNAME
#       # - echo $OS_PASSWORD
#       # - echo $OS_PASSWORD_INPUT
#       - cd terraform
#       - terraform init
#       - terraform apply -auto-approve
#       - cat ../ansible/inventory/hosts.ini
#       - terraform state pull > tfstate.json
#       - terraform output floating_ip > floating_ip.txt
      
#     artifacts:
#       paths:
#       - terraform/tfstate.json
#       - ansible/inventory/hosts.ini
#       - terraform/floating_ip.txt

# #########################################################################################
# # STAGE3: Instance is getting configured using ansible.
# configure:
#     stage: configure
#     # tags:
#     #   - NETCRACKER
#     image: $ansible_image
#     script:
#       - mkdir -p $HOME/.ssh/ && mkdir -p /etc/ansible
#       - echo "$PRIVATE_KEY" > $HOME/.ssh/id_rsa && chmod 600 $HOME/.ssh/id_rsa
#       - sleep 60
#       - cd ansible
#       - cp -prv * /etc/ansible/ > /dev/null
#       - cd /etc/ansible
#       # - ansible --version
#       - ansible-playbook site.yaml

# #########################################################################################
# # STAGE4: Test the curl output.
# test:
#     stage: test
#     image: $terraform_image
#     # tags:
#     #   - NETCRACKER
#     script:
#       - cd terraform
#       - cat floating_ip.txt
#       - IP_ADDRESS=$(grep -oE '[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+' floating_ip.txt)
#       - curl -sI ${IP_ADDRESS}:8080 | head -n 1 | awk 'NR==1 {print $1, $2, $3}' | grep -i '^HTTP/'

# #########################################################################################
# # STAGE5: Destroying the instance.
# destroy:
#     stage: destroy
#     image: $terraform_image
#     # tags: 
#     #   - NETCRACKER
#     script:
#       - echo "$openrc" > openstack.sh
#       - mkdir -p $HOME/.ssh/
#       - echo "$PUBLIC_KEY" > $HOME/.ssh/id_rsa.pub
#       - source openstack.sh
#       - cd terraform
#       - terraform init
#       - terraform state push tfstate.json
#       - terraform destroy -auto-approve

# #########################################################################################
